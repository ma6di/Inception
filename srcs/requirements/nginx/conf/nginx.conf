# ⚙️ Number of NGINX worker processes — 1 is enough for a lightweight setup
worker_processes 1;

#The maximum number of simultaneous connections that a single worker process can handle.
#NGINX uses one or more worker processes to handle client requests.
#Each worker can handle multiple connections using event-driven I/O (like epoll, kqueue, etc.).
#worker_connections sets the upper limit for how many open connections each worker 
#can manage at the same time.

events {
    # 🔄 Maximum number of simultaneous connections
    worker_connections 1024;
}

http {
    # 📂 Include MIME types so NGINX knows how to serve different file types
    #MIME stands for Multipurpose Internet Mail Extensions. (.html,.css,.js,.png)
    #It tells the browser what type of content is being sent.
    include       mime.types;

    # 📦 Default MIME type if one isn't detected
    #I don’t know what this file is, treat it as raw binary data.
    default_type  application/octet-stream;

    # 🚀 Enable zero-copy file transmission (faster file serving)
    sendfile        on;

    server {
        # 🌐 Listen on port 443 using HTTPS
        # ✅ REQUIRED by Inception: NGINX must serve only on port 443 (HTTPS)
        listen 443 ssl;

        # 🌍 The domain name used for your website
        # ✅ REQUIRED: Must be <login>.42.fr
        server_name login.42.fr;

        # 🔐 SSL certificate and key (must be generated and copied in Dockerfile)
        # ✅ REQUIRED: Inception mandates HTTPS with TLSv1.3
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # ✅ REQUIRED: Use modern secure TLS protocols (Transport Layer Security (TLS) protocol )
        # is the successor to SSL and is used to:
        # Encrypt data in transit
        # Authenticate the server (and optionally the client)
        # Ensure data integrity
        # It protects users when visiting secure websites (https://), sending emails, logging into services, etc.
        ssl_protocols TLSv1.3;

        # 📁 Root directory for the site (shared with WordPress container)
        # Sets the root directory from which files will be served by NGINX for this server block or location.
        # It defines the base directory for all files unless overridden inside a more specific location block.
        root /var/www/html;

        # 🏠 Default file(s) to serve at the root of a directory
        # If index.php exists, it will serve that. If not, it will fall back to index.html.
        # Use case: Needed for WordPress and most web apps, which usually have an index.php.
        index index.php index.html;

        #This block defines how NGINX should handle requests that begin with / — essentially, all requests to the root and below.
        location / {
            # 🧭 Try to serve the exact file, then directory, then return 404
            # Try to serve the file that matches the exact URI path.
            # If the file doesn’t exist, try treating it as a directory (trailing slash).
            # If neither the file nor directory exists, return a 404 Not Found error.
            try_files $uri $uri/ =404;
        }

        # This block tells NGINX how to handle .php files — such as index.php, login.php, etc.
        # 🧠 What is CGI?
            # CGI (Common Gateway Interface) is:
            # A standard way for web servers to execute programs/scripts to generate dynamic content.
            # FastCGI is an improved version of CGI:
                # Persistent process: keeps a PHP interpreter running so it can handle many requests quickly 
                # (no forking every time).
        location ~ \.php$ {
            # 📦 Include default FastCGI parameters
            # This includes a standard set of variables (headers, server info, etc.) needed by the FastCGI backend.
            # It’s like giving the PHP interpreter the environment it needs to understand the request.
            include fastcgi_params;

            # 🔁 Forward PHP requests to WordPress container's PHP-FPM service
            # ⚠️ Make sure WordPress listens on port 9000 in its Dockerfile or entrypoint
            fastcgi_pass wordpress:9000;

            # 🔗 Provide the full path to the script being executed
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

            # 🏷️ Optional: set SCRIPT_NAME for FastCGI (WordPress compatibility)
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        }
    }
}
